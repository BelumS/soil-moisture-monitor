/* trackuino copyright (C) 2010  EA5HAV Javi
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

#ifndef __CONFIG_H__
#define __CONFIG_H__


// --------------------------------------------------------------------------
// THIS IS THE TRACKUINO FIRMWARE CONFIGURATION FILE. YOUR CALLSIGN AND
// OTHER SETTINGS GO HERE.
//
// NOTE: all pins are Arduino based, not the Atmega chip. Mapping:
// http://www.arduino.cc/en/Hacking/PinMapping
// --------------------------------------------------------------------------


// --------------------------------------------------------------------------
// APRS config (aprs.cpp)
// --------------------------------------------------------------------------

// Set your callsign and SSID here. Common values for the SSID are
// (from http://zlhams.wikidot.com/aprs-ssidguide):
//
// - Weather:   13
// - Cars:       9
// - Home:       0
// - IGate:      5
#define S_CALLSIGN      "KR3ESE"
#define S_CALLSIGN_ID   13

#define D_CALLSIGN      "APRS"
#define D_CALLSIGN_ID   0

// Digipeating paths:
// (read more about digipeating paths here: http://wa8lmf.net/DigiPaths/ )
// The recommended digi path for a balloon is WIDE2-1 or pathless. The default
// is to use WIDE2-1. Comment out the following two lines for pathless:
#define DIGI_PATH1      "WIDE2"
#define DIGI_PATH1_TTL  1

// APRS comment: this goes in the comment portion of the APRS message. You
// might want to keep this short. The longer the packet, the more vulnerable
// it is to noise. 
// MAX LENGTH OF COMMENT FIELD 36 bytes, note altitude takes up 10 bytes !!!
#define APRS_COMMENT    "Soil Monitor"

// Try some different messages, uncomment the
//#define APRS_TIMESTAMPED
#define APRS_NOTIMESTAMP
#define APRS_TELEMETRY

// --------------------------------------------------------------------------
// AX.25 config (ax25.cpp)
// --------------------------------------------------------------------------

// TX delay in milliseconds
#define TX_DELAY      1000
//A value of 1000 transmits to 1200 baud rate

// --------------------------------------------------------------------------
// Tracker config (trackuino.ino)
// --------------------------------------------------------------------------

// APRS_PERIOD is the period between transmissions. Since we're not listening
// before transmitting, it may be wise to choose a "random" value here JUST
// in case someone else is transmitting at fixed intervals like us. 61000 ms
// is the default (1 minute and 1 second).
//
// Low-power transmissions on occasional events (such as a balloon launch)
// might be okay at lower-than-standard APRS periods (< 10m). Check with/ask
// permision to local digipeaters beforehand.
//#define APRS_PERIOD           86400000UL  /send packets once a day
  #define APRS_PERIOD           15000UL; //send packets every 15 seconds

#define APRS_TELEM_CFG_CNT    40       // send telem units every 40th packet

// Set any value here (in ms) if you want to delay the first transmission
// after resetting the device.
#define APRS_DELAY            10000UL  // wait 10s after powerup to send pkt

// Desired Serial Monitor baud rate (in bits per second)
#define BAUDRATE  9600.0

// --------------------------------------------------------------------------
// Modem config (modem.cpp)
// --------------------------------------------------------------------------

// AUDIO_PIN is the audio-out pin. The audio is generated by timer 2 using
// PWM, so the only two options are pins 3 and 11.
// Pin 11 doubles as MOSI, so I suggest using pin 3 for PWM and leave 11 free
// in case you ever want to interface with an SPI device.
#define AUDIO_PIN       3

// Radio: I've tested trackuino with two different radios:
// Radiometrix HX1 and SRB MX146. The interface with these devices
// is implemented in their respective radio_*.cpp files, and here
// you can choose which one will be hooked up to the tracker.
// The tracker will behave differently depending on the radio used:
//
// RadioHx1 (Radiometrix HX1):
// - Time from PTT-on to transmit: 5ms (per datasheet)
// - PTT is TTL-level driven (on=high) and audio input is 5v pkpk
//   filtered and internally DC-coupled by the HX1, so both PTT
//   and audio can be wired directly. Very few external components
//   are needed for this radio, indeed.

#define RADIO_CLASS   RadioHx1

// --------------------------------------------------------------------------
// Radio config (radio_hx1.cpp)
// --------------------------------------------------------------------------

// This is the PTT pin
#define PTT_PIN           4

// --------------------------------------------------------------------------
// Sensors config (sensors.cpp)
// --------------------------------------------------------------------------

//Soil Moisture Sensor pin mapping
#define SOIL_TXD          A0

//Soil Moisture Calibration
#define AIR_VALUE         508
#define WATER_VALUE       242
#define INTERVALS         (AIR_VALUE - WATER_VALUE) / 3;

// --------------------------------------------------------------------------
// Debug
// --------------------------------------------------------------------------

// This is the LED pin (13 on Arduinos). The LED will be on while the AVR is
// running and off while it's sleeping, so its brightness gives an indication
// of the activity.
#define LED_PIN           13

// Debug info includes printouts from different modules to aid in testing and
// debugging.
// 
// 1. To properly receive debug information, remove the comment from
//    the respective debug macro that you wish to test.
//
// 2. On the serial monitor, set the baudrate to BAUDRATE (above),
//    usually 9600.
//
// 3. Note that, for the AX25, the debug may not represent the exact
//    format of the APRS message

 
//   #define DEBUG_AX25   // AX.25 frame dump
//   #define DEBUG_MODEM  // Modem ISR overrun and profiling
//   #define DEBUG_SENS   // Sensor output data
//   #define DEBUG_RESET  // AVR reset

#endif
